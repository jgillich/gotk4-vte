// Code generated by girgen. DO NOT EDIT.

package vte

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <vte/vte.h>
import "C"

// GType values.
var (
	GTypeCursorBlinkMode = coreglib.Type(C.vte_cursor_blink_mode_get_type())
	GTypeCursorShape     = coreglib.Type(C.vte_cursor_shape_get_type())
	GTypeEraseBinding    = coreglib.Type(C.vte_erase_binding_get_type())
	GTypeWriteFlags      = coreglib.Type(C.vte_write_flags_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeCursorBlinkMode, F: marshalCursorBlinkMode},
		coreglib.TypeMarshaler{T: GTypeCursorShape, F: marshalCursorShape},
		coreglib.TypeMarshaler{T: GTypeEraseBinding, F: marshalEraseBinding},
		coreglib.TypeMarshaler{T: GTypeWriteFlags, F: marshalWriteFlags},
	})
}

// CursorBlinkMode: enumerated type which can be used to indicate the cursor
// blink mode for the terminal.
type CursorBlinkMode C.gint

const (
	// CursorBlinkSystem: follow GTK+ settings for cursor blinking.
	CursorBlinkSystem CursorBlinkMode = iota
	// CursorBlinkOn: cursor blinks.
	CursorBlinkOn
	// CursorBlinkOff: cursor does not blink.
	CursorBlinkOff
)

func marshalCursorBlinkMode(p uintptr) (interface{}, error) {
	return CursorBlinkMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for CursorBlinkMode.
func (c CursorBlinkMode) String() string {
	switch c {
	case CursorBlinkSystem:
		return "System"
	case CursorBlinkOn:
		return "On"
	case CursorBlinkOff:
		return "Off"
	default:
		return fmt.Sprintf("CursorBlinkMode(%d)", c)
	}
}

// CursorShape: enumerated type which can be used to indicate what should the
// terminal draw at the cursor position.
type CursorShape C.gint

const (
	// CursorShapeBlock: draw a block cursor. This is the default.
	CursorShapeBlock CursorShape = iota
	// CursorShapeIbeam: draw a vertical bar on the left side of character.
	// This is similar to the default cursor for other GTK+ widgets.
	CursorShapeIbeam
	// CursorShapeUnderline: draw a horizontal bar below the character.
	CursorShapeUnderline
)

func marshalCursorShape(p uintptr) (interface{}, error) {
	return CursorShape(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for CursorShape.
func (c CursorShape) String() string {
	switch c {
	case CursorShapeBlock:
		return "Block"
	case CursorShapeIbeam:
		return "Ibeam"
	case CursorShapeUnderline:
		return "Underline"
	default:
		return fmt.Sprintf("CursorShape(%d)", c)
	}
}

// EraseBinding: enumerated type which can be used to indicate which string the
// terminal should send to an application when the user presses the Delete or
// Backspace keys.
type EraseBinding C.gint

const (
	// EraseAuto: for backspace, attempt to determine the right value from the
	// terminal's IO settings. For delete, use the control sequence.
	EraseAuto EraseBinding = iota
	// EraseASCIIBackspace: send an ASCII backspace character (0x08).
	EraseASCIIBackspace
	// EraseASCIIDelete: send an ASCII delete character (0x7F).
	EraseASCIIDelete
	// EraseDeleteSequence: send the "@7" control sequence.
	EraseDeleteSequence
	// EraseTty: send terminal's "erase" setting.
	EraseTty
)

func marshalEraseBinding(p uintptr) (interface{}, error) {
	return EraseBinding(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for EraseBinding.
func (e EraseBinding) String() string {
	switch e {
	case EraseAuto:
		return "Auto"
	case EraseASCIIBackspace:
		return "ASCIIBackspace"
	case EraseASCIIDelete:
		return "ASCIIDelete"
	case EraseDeleteSequence:
		return "DeleteSequence"
	case EraseTty:
		return "Tty"
	default:
		return fmt.Sprintf("EraseBinding(%d)", e)
	}
}

// WriteFlags: flag type to determine how terminal contents should be written to
// an output stream.
type WriteFlags C.gint

const (
	// WriteDefault: write contents as UTF-8 text. This is the default.
	WriteDefault WriteFlags = iota
)

func marshalWriteFlags(p uintptr) (interface{}, error) {
	return WriteFlags(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for WriteFlags.
func (w WriteFlags) String() string {
	switch w {
	case WriteDefault:
		return "Default"
	default:
		return fmt.Sprintf("WriteFlags(%d)", w)
	}
}
