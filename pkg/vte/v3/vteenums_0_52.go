// Code generated by girgen. DO NOT EDIT.

package vte

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <vte/vte.h>
import "C"

// GType values.
var (
	GTypeTextBlinkMode = coreglib.Type(C.vte_text_blink_mode_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTextBlinkMode, F: marshalTextBlinkMode},
	})
}

// TextBlinkMode: enumerated type which can be used to indicate whether the
// terminal allows the text contents to be blinked.
type TextBlinkMode C.gint

const (
	// TextBlinkNever: do not blink the text.
	TextBlinkNever TextBlinkMode = iota
	// TextBlinkFocused: allow blinking text only if the terminal is focused.
	TextBlinkFocused
	// TextBlinkUnfocused: allow blinking text only if the terminal is
	// unfocused.
	TextBlinkUnfocused
	// TextBlinkAlways: allow blinking text. This is the default.
	TextBlinkAlways
)

func marshalTextBlinkMode(p uintptr) (interface{}, error) {
	return TextBlinkMode(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for TextBlinkMode.
func (t TextBlinkMode) String() string {
	switch t {
	case TextBlinkNever:
		return "Never"
	case TextBlinkFocused:
		return "Focused"
	case TextBlinkUnfocused:
		return "Unfocused"
	case TextBlinkAlways:
		return "Always"
	default:
		return fmt.Sprintf("TextBlinkMode(%d)", t)
	}
}
