// Code generated by girgen. DO NOT EDIT.

package vte

import (
	"context"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/cairo"
	"github.com/diamondburned/gotk4/pkg/core/gbox"
	"github.com/diamondburned/gotk4/pkg/core/gcancel"
	"github.com/diamondburned/gotk4/pkg/core/gerror"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v4"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	"github.com/diamondburned/gotk4/pkg/pango"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <vte/vte.h>
// extern void _gotk4_vte3_Terminal_ConnectWindowTitleChanged(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectSelectionChanged(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectRestoreWindow(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectResizeWindow(gpointer, guint, guint, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectRefreshWindow(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectRaiseWindow(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectPasteClipboard(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectMoveWindow(gpointer, guint, guint, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectMaximizeWindow(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectLowerWindow(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectIncreaseFontSize(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectIconifyWindow(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectIconTitleChanged(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectHyperlinkHoverURIChanged(gpointer, gchar*, GdkRectangle*, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectEncodingChanged(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectEOF(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectDeiconifyWindow(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectDecreaseFontSize(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectCursorMoved(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectCurrentFileURIChanged(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectCurrentDirectoryURIChanged(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectCopyClipboard(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectContentsChanged(gpointer, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectCommit(gpointer, gchar*, guint, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectChildExited(gpointer, gint, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectCharSizeChanged(gpointer, guint, guint, guintptr);
// extern void _gotk4_vte3_Terminal_ConnectBell(gpointer, guintptr);
// extern void _gotk4_vte3_TerminalClass_window_title_changed(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_selection_changed(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_restore_window(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_resize_window(VteTerminal*, guint, guint);
// extern void _gotk4_vte3_TerminalClass_refresh_window(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_raise_window(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_paste_clipboard(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_move_window(VteTerminal*, guint, guint);
// extern void _gotk4_vte3_TerminalClass_maximize_window(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_lower_window(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_increase_font_size(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_iconify_window(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_icon_title_changed(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_eof(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_encoding_changed(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_deiconify_window(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_decrease_font_size(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_cursor_moved(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_copy_clipboard(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_contents_changed(VteTerminal*);
// extern void _gotk4_vte3_TerminalClass_commit(VteTerminal*, gchar*, guint);
// extern void _gotk4_vte3_TerminalClass_child_exited(VteTerminal*, int);
// extern void _gotk4_vte3_TerminalClass_char_size_changed(VteTerminal*, guint, guint);
// extern void _gotk4_vte3_TerminalClass_bell(VteTerminal*);
// extern gboolean _gotk4_vte3_SelectionFunc(VteTerminal*, glong, glong, gpointer);
// void _gotk4_vte3_Terminal_virtual_bell(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_char_size_changed(void* fnptr, VteTerminal* arg0, guint arg1, guint arg2) {
//   ((void (*)(VteTerminal*, guint, guint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_vte3_Terminal_virtual_child_exited(void* fnptr, VteTerminal* arg0, int arg1) {
//   ((void (*)(VteTerminal*, int))(fnptr))(arg0, arg1);
// };
// void _gotk4_vte3_Terminal_virtual_commit(void* fnptr, VteTerminal* arg0, gchar* arg1, guint arg2) {
//   ((void (*)(VteTerminal*, gchar*, guint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_vte3_Terminal_virtual_contents_changed(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_copy_clipboard(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_cursor_moved(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_decrease_font_size(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_deiconify_window(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_encoding_changed(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_eof(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_icon_title_changed(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_iconify_window(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_increase_font_size(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_lower_window(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_maximize_window(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_move_window(void* fnptr, VteTerminal* arg0, guint arg1, guint arg2) {
//   ((void (*)(VteTerminal*, guint, guint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_vte3_Terminal_virtual_paste_clipboard(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_raise_window(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_refresh_window(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_resize_window(void* fnptr, VteTerminal* arg0, guint arg1, guint arg2) {
//   ((void (*)(VteTerminal*, guint, guint))(fnptr))(arg0, arg1, arg2);
// };
// void _gotk4_vte3_Terminal_virtual_restore_window(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_selection_changed(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
// void _gotk4_vte3_Terminal_virtual_window_title_changed(void* fnptr, VteTerminal* arg0) {
//   ((void (*)(VteTerminal*))(fnptr))(arg0);
// };
import "C"

// GType values.
var (
	GTypeTerminal = coreglib.Type(C.vte_terminal_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeTerminal, F: marshalTerminal},
	})
}

// SelectionFunc specifies the type of a selection function used to check
// whether a cell has to be selected or not.
type SelectionFunc func(terminal *Terminal, column, row int32) (ok bool)

// TerminalOverrides contains methods that are overridable.
type TerminalOverrides struct {
	Bell func()
	// The function takes the following parameters:
	//
	//   - charWidth
	//   - charHeight
	//
	CharSizeChanged func(charWidth, charHeight uint)
	// The function takes the following parameters:
	//
	ChildExited func(status int)
	// The function takes the following parameters:
	//
	//   - text
	//   - size
	//
	Commit          func(text string, size uint)
	ContentsChanged func()
	// CopyClipboard places the selected text in the terminal in the
	// K_SELECTION_CLIPBOARD selection.
	//
	// Deprecated: Use vte_terminal_copy_clipboard_format() with VTE_FORMAT_TEXT
	// instead.
	CopyClipboard    func()
	CursorMoved      func()
	DecreaseFontSize func()
	DeiconifyWindow  func()
	EncodingChanged  func()
	EOF              func()
	IconTitleChanged func()
	IconifyWindow    func()
	IncreaseFontSize func()
	LowerWindow      func()
	MaximizeWindow   func()
	// The function takes the following parameters:
	//
	//   - x
	//   - y
	//
	MoveWindow func(x, y uint)
	// PasteClipboard sends the contents of the K_SELECTION_CLIPBOARD selection
	// to the terminal's child. It's called on paste menu item, or when user
	// presses Shift+Insert.
	PasteClipboard func()
	RaiseWindow    func()
	RefreshWindow  func()
	// The function takes the following parameters:
	//
	//   - width
	//   - height
	//
	ResizeWindow       func(width, height uint)
	RestoreWindow      func()
	SelectionChanged   func()
	WindowTitleChanged func()
}

func defaultTerminalOverrides(v *Terminal) TerminalOverrides {
	return TerminalOverrides{
		Bell:               v.bell,
		CharSizeChanged:    v.charSizeChanged,
		ChildExited:        v.childExited,
		Commit:             v.commit,
		ContentsChanged:    v.contentsChanged,
		CopyClipboard:      v.copyClipboard,
		CursorMoved:        v.cursorMoved,
		DecreaseFontSize:   v.decreaseFontSize,
		DeiconifyWindow:    v.deiconifyWindow,
		EncodingChanged:    v.encodingChanged,
		EOF:                v.eoF,
		IconTitleChanged:   v.iconTitleChanged,
		IconifyWindow:      v.iconifyWindow,
		IncreaseFontSize:   v.increaseFontSize,
		LowerWindow:        v.lowerWindow,
		MaximizeWindow:     v.maximizeWindow,
		MoveWindow:         v.moveWindow,
		PasteClipboard:     v.pasteClipboard,
		RaiseWindow:        v.raiseWindow,
		RefreshWindow:      v.refreshWindow,
		ResizeWindow:       v.resizeWindow,
		RestoreWindow:      v.restoreWindow,
		SelectionChanged:   v.selectionChanged,
		WindowTitleChanged: v.windowTitleChanged,
	}
}

type Terminal struct {
	_ [0]func() // equal guard
	gtk.Widget

	*coreglib.Object
	gtk.Scrollable
}

var (
	_ gtk.Widgetter     = (*Terminal)(nil)
	_ coreglib.Objector = (*Terminal)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*Terminal, *TerminalClass, TerminalOverrides](
		GTypeTerminal,
		initTerminalClass,
		wrapTerminal,
		defaultTerminalOverrides,
	)
}

func initTerminalClass(gclass unsafe.Pointer, overrides TerminalOverrides, classInitFunc func(*TerminalClass)) {
	pclass := (*C.VteTerminalClass)(unsafe.Pointer(C.g_type_check_class_cast((*C.GTypeClass)(gclass), C.GType(GTypeTerminal))))

	if overrides.Bell != nil {
		pclass.bell = (*[0]byte)(C._gotk4_vte3_TerminalClass_bell)
	}

	if overrides.CharSizeChanged != nil {
		pclass.char_size_changed = (*[0]byte)(C._gotk4_vte3_TerminalClass_char_size_changed)
	}

	if overrides.ChildExited != nil {
		pclass.child_exited = (*[0]byte)(C._gotk4_vte3_TerminalClass_child_exited)
	}

	if overrides.Commit != nil {
		pclass.commit = (*[0]byte)(C._gotk4_vte3_TerminalClass_commit)
	}

	if overrides.ContentsChanged != nil {
		pclass.contents_changed = (*[0]byte)(C._gotk4_vte3_TerminalClass_contents_changed)
	}

	if overrides.CopyClipboard != nil {
		pclass.copy_clipboard = (*[0]byte)(C._gotk4_vte3_TerminalClass_copy_clipboard)
	}

	if overrides.CursorMoved != nil {
		pclass.cursor_moved = (*[0]byte)(C._gotk4_vte3_TerminalClass_cursor_moved)
	}

	if overrides.DecreaseFontSize != nil {
		pclass.decrease_font_size = (*[0]byte)(C._gotk4_vte3_TerminalClass_decrease_font_size)
	}

	if overrides.DeiconifyWindow != nil {
		pclass.deiconify_window = (*[0]byte)(C._gotk4_vte3_TerminalClass_deiconify_window)
	}

	if overrides.EncodingChanged != nil {
		pclass.encoding_changed = (*[0]byte)(C._gotk4_vte3_TerminalClass_encoding_changed)
	}

	if overrides.EOF != nil {
		pclass.eof = (*[0]byte)(C._gotk4_vte3_TerminalClass_eof)
	}

	if overrides.IconTitleChanged != nil {
		pclass.icon_title_changed = (*[0]byte)(C._gotk4_vte3_TerminalClass_icon_title_changed)
	}

	if overrides.IconifyWindow != nil {
		pclass.iconify_window = (*[0]byte)(C._gotk4_vte3_TerminalClass_iconify_window)
	}

	if overrides.IncreaseFontSize != nil {
		pclass.increase_font_size = (*[0]byte)(C._gotk4_vte3_TerminalClass_increase_font_size)
	}

	if overrides.LowerWindow != nil {
		pclass.lower_window = (*[0]byte)(C._gotk4_vte3_TerminalClass_lower_window)
	}

	if overrides.MaximizeWindow != nil {
		pclass.maximize_window = (*[0]byte)(C._gotk4_vte3_TerminalClass_maximize_window)
	}

	if overrides.MoveWindow != nil {
		pclass.move_window = (*[0]byte)(C._gotk4_vte3_TerminalClass_move_window)
	}

	if overrides.PasteClipboard != nil {
		pclass.paste_clipboard = (*[0]byte)(C._gotk4_vte3_TerminalClass_paste_clipboard)
	}

	if overrides.RaiseWindow != nil {
		pclass.raise_window = (*[0]byte)(C._gotk4_vte3_TerminalClass_raise_window)
	}

	if overrides.RefreshWindow != nil {
		pclass.refresh_window = (*[0]byte)(C._gotk4_vte3_TerminalClass_refresh_window)
	}

	if overrides.ResizeWindow != nil {
		pclass.resize_window = (*[0]byte)(C._gotk4_vte3_TerminalClass_resize_window)
	}

	if overrides.RestoreWindow != nil {
		pclass.restore_window = (*[0]byte)(C._gotk4_vte3_TerminalClass_restore_window)
	}

	if overrides.SelectionChanged != nil {
		pclass.selection_changed = (*[0]byte)(C._gotk4_vte3_TerminalClass_selection_changed)
	}

	if overrides.WindowTitleChanged != nil {
		pclass.window_title_changed = (*[0]byte)(C._gotk4_vte3_TerminalClass_window_title_changed)
	}

	if classInitFunc != nil {
		class := (*TerminalClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapTerminal(obj *coreglib.Object) *Terminal {
	return &Terminal{
		Widget: gtk.Widget{
			InitiallyUnowned: coreglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
		},
		Object: obj,
		Scrollable: gtk.Scrollable{
			Object: obj,
		},
	}
}

func marshalTerminal(p uintptr) (interface{}, error) {
	return wrapTerminal(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// ConnectBell: this signal is emitted when the a child sends a bell request to
// the terminal.
func (terminal *Terminal) ConnectBell(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "bell", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectBell), f)
}

// ConnectCharSizeChanged is emitted whenever the cell size changes, e.g.
// due to a change in font, font-scale or cell-width/height-scale.
//
// Note that this signal should rather be called "cell-size-changed".
func (terminal *Terminal) ConnectCharSizeChanged(f func(width, height uint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "char-size-changed", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectCharSizeChanged), f)
}

// ConnectChildExited: this signal is emitted when the terminal detects that a
// child watched using vte_terminal_watch_child() has exited.
func (terminal *Terminal) ConnectChildExited(f func(status int)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "child-exited", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectChildExited), f)
}

// ConnectCommit is emitted whenever the terminal receives input from the user
// and prepares to send it to the child process.
func (terminal *Terminal) ConnectCommit(f func(text string, size uint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "commit", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectCommit), f)
}

// ConnectContentsChanged is emitted whenever the visible appearance of the
// terminal has changed. Used primarily by TerminalAccessible.
func (terminal *Terminal) ConnectContentsChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "contents-changed", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectContentsChanged), f)
}

// ConnectCopyClipboard is emitted whenever vte_terminal_copy_clipboard() is
// called.
func (terminal *Terminal) ConnectCopyClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "copy-clipboard", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectCopyClipboard), f)
}

// ConnectCurrentDirectoryURIChanged is emitted when the current directory URI
// is modified.
func (terminal *Terminal) ConnectCurrentDirectoryURIChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "current-directory-uri-changed", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectCurrentDirectoryURIChanged), f)
}

// ConnectCurrentFileURIChanged is emitted when the current file URI is
// modified.
func (terminal *Terminal) ConnectCurrentFileURIChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "current-file-uri-changed", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectCurrentFileURIChanged), f)
}

// ConnectCursorMoved is emitted whenever the cursor moves to a new character
// cell. Used primarily by TerminalAccessible.
func (terminal *Terminal) ConnectCursorMoved(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "cursor-moved", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectCursorMoved), f)
}

// ConnectDecreaseFontSize is emitted when the user hits the '-' key while
// holding the Control key.
func (terminal *Terminal) ConnectDecreaseFontSize(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "decrease-font-size", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectDecreaseFontSize), f)
}

// ConnectDeiconifyWindow: never emitted.
func (terminal *Terminal) ConnectDeiconifyWindow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "deiconify-window", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectDeiconifyWindow), f)
}

// ConnectEncodingChanged is emitted whenever the terminal's current encoding
// has changed.
//
// Note: support for non-UTF-8 is deprecated.
func (terminal *Terminal) ConnectEncodingChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "encoding-changed", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectEncodingChanged), f)
}

// ConnectEOF is emitted when the terminal receives an end-of-file from a child
// which is running in the terminal. This signal is frequently (but not always)
// emitted with a Terminal::child-exited signal.
func (terminal *Terminal) ConnectEOF(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "eof", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectEOF), f)
}

// ConnectHyperlinkHoverURIChanged is emitted when the hovered hyperlink
// changes.
//
// uri and bbox are owned by VTE, must not be modified, and might change after
// the signal handlers returns.
//
// The signal is not re-emitted when the bounding box changes for the same
// hyperlink. This might change in a future VTE version without notice.
func (terminal *Terminal) ConnectHyperlinkHoverURIChanged(f func(uri string, bbox *gdk.Rectangle)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "hyperlink-hover-uri-changed", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectHyperlinkHoverURIChanged), f)
}

func (terminal *Terminal) ConnectIconTitleChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "icon-title-changed", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectIconTitleChanged), f)
}

// ConnectIconifyWindow: never emitted.
func (terminal *Terminal) ConnectIconifyWindow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "iconify-window", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectIconifyWindow), f)
}

// ConnectIncreaseFontSize is emitted when the user hits the '+' key while
// holding the Control key.
func (terminal *Terminal) ConnectIncreaseFontSize(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "increase-font-size", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectIncreaseFontSize), f)
}

// ConnectLowerWindow: never emitted.
func (terminal *Terminal) ConnectLowerWindow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "lower-window", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectLowerWindow), f)
}

// ConnectMaximizeWindow: never emitted.
func (terminal *Terminal) ConnectMaximizeWindow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "maximize-window", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectMaximizeWindow), f)
}

// ConnectMoveWindow: never emitted.
func (terminal *Terminal) ConnectMoveWindow(f func(x, y uint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "move-window", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectMoveWindow), f)
}

// ConnectPasteClipboard is emitted whenever vte_terminal_paste_clipboard() is
// called.
func (terminal *Terminal) ConnectPasteClipboard(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "paste-clipboard", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectPasteClipboard), f)
}

// ConnectRaiseWindow: never emitted.
func (terminal *Terminal) ConnectRaiseWindow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "raise-window", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectRaiseWindow), f)
}

// ConnectRefreshWindow: never emitted.
func (terminal *Terminal) ConnectRefreshWindow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "refresh-window", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectRefreshWindow), f)
}

// ConnectResizeWindow is emitted at the child application's request.
func (terminal *Terminal) ConnectResizeWindow(f func(width, height uint)) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "resize-window", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectResizeWindow), f)
}

// ConnectRestoreWindow: never emitted.
func (terminal *Terminal) ConnectRestoreWindow(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "restore-window", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectRestoreWindow), f)
}

// ConnectSelectionChanged is emitted whenever the contents of terminal's
// selection changes.
func (terminal *Terminal) ConnectSelectionChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "selection-changed", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectSelectionChanged), f)
}

// ConnectWindowTitleChanged is emitted when the Terminal:window-title property
// is modified.
func (terminal *Terminal) ConnectWindowTitleChanged(f func()) coreglib.SignalHandle {
	return coreglib.ConnectGeneratedClosure(terminal, "window-title-changed", false, unsafe.Pointer(C._gotk4_vte3_Terminal_ConnectWindowTitleChanged), f)
}

// NewTerminal creates a new terminal widget.
//
// The function returns the following values:
//
//   - terminal: new Terminal object.
//
func NewTerminal() *Terminal {
	var _cret *C.GtkWidget // in

	_cret = C.vte_terminal_new()

	var _terminal *Terminal // out

	_terminal = wrapTerminal(coreglib.Take(unsafe.Pointer(_cret)))

	return _terminal
}

// CheckHyperlinkAt returns a nonempty string: the target of the explicit
// hyperlink (printed using the OSC 8 escape sequence) at the position (x, y),
// or NULL.
//
// Proper use of the escape sequence should result in URI-encoded URIs with a
// proper scheme like "http://", "https://", "file://", "mailto:" etc. This is,
// however, not enforced by VTE. The caller must tolerate the returned string
// potentially not being a valid URI.
//
// The function takes the following parameters:
//
//   - x
//   - y
//
// The function returns the following values:
//
//   - utf8 (optional): newly allocated string containing the target of the
//     hyperlink, or NULL.
//
func (terminal *Terminal) CheckHyperlinkAt(x, y float64) string {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.double       // out
	var _arg2 C.double       // out
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.double(x)
	_arg2 = C.double(y)

	_cret = C.vte_terminal_check_hyperlink_at(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// CheckMatchAt checks if the text in and around the position (x, y) matches any
// of the regular expressions previously set using vte_terminal_match_add().
// If a match exists, the text string is returned and if tag is not NULL, the
// number associated with the matched regular expression will be stored in tag.
//
// If more than one regular expression has been set with
// vte_terminal_match_add(), then expressions are checked in the order in which
// they were added.
//
// The function takes the following parameters:
//
//   - x
//   - y
//
// The function returns the following values:
//
//   - tag (optional): location to store the tag, or NULL.
//   - utf8 (optional): newly allocated string which matches one of the
//     previously set regular expressions, or NULL if there is no match.
//
func (terminal *Terminal) CheckMatchAt(x, y float64) (int, string) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.double       // out
	var _arg2 C.double       // out
	var _arg3 C.int          // in
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.double(x)
	_arg2 = C.double(y)

	_cret = C.vte_terminal_check_match_at(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)

	var _tag int     // out
	var _utf8 string // out

	_tag = int(_arg3)
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _tag, _utf8
}

// CheckRegexSimpleAt: like vte_terminal_check_regex_simple_at(), but returns
// an array of strings, containing the matching text (or NULL if no match)
// corresponding to each of the regexes in regexes.
//
// You must free each string and the array; but note that this is *not* a
// NULL-terminated string array, and so you must *not* use g_strfreev() on it.
//
// The function takes the following parameters:
//
//   - x
//   - y
//   - regexes: array of Regex.
//   - matchFlags: PCRE2 match flags, or 0.
//
// The function returns the following values:
//
//   - utf8s (optional): newly allocated array of strings, or NULL if none of
//     the regexes matched.
//
func (terminal *Terminal) CheckRegexSimpleAt(x, y float64, regexes []*Regex, matchFlags uint32) []string {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.double       // out
	var _arg2 C.double       // out
	var _arg3 **C.VteRegex   // out
	var _arg4 C.gsize
	var _arg5 C.guint32 // out
	var _cret **C.char  // in
	var _arg6 C.gsize   // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.double(x)
	_arg2 = C.double(y)
	_arg4 = (C.gsize)(len(regexes))
	_arg3 = (**C.VteRegex)(C.calloc(C.size_t(len(regexes)), C.size_t(unsafe.Sizeof(uint(0)))))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice((**C.VteRegex)(_arg3), len(regexes))
		for i := range regexes {
			out[i] = (*C.VteRegex)(gextras.StructNative(unsafe.Pointer(regexes[i])))
		}
	}
	_arg5 = C.guint32(matchFlags)

	_cret = C.vte_terminal_check_regex_array_at(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_arg6)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
	runtime.KeepAlive(regexes)
	runtime.KeepAlive(matchFlags)

	var _utf8s []string // out

	if _cret != nil {
		defer C.free(unsafe.Pointer(_cret))
		{
			src := unsafe.Slice((**C.char)(_cret), _arg6)
			_utf8s = make([]string, _arg6)
			for i := 0; i < int(_arg6); i++ {
				_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
				defer C.free(unsafe.Pointer(src[i]))
			}
		}
	}

	return _utf8s
}

// CopyClipboard places the selected text in the terminal in the
// K_SELECTION_CLIPBOARD selection.
//
// Deprecated: Use vte_terminal_copy_clipboard_format() with VTE_FORMAT_TEXT
// instead.
func (terminal *Terminal) CopyClipboard() {
	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_copy_clipboard(_arg0)
	runtime.KeepAlive(terminal)
}

// CopyClipboardFormat places the selected text in the terminal in the
// K_SELECTION_CLIPBOARD selection in the form specified by format.
//
// For all formats, the selection data (see SelectionData) will
// include the text targets (see gtk_target_list_add_text_targets() and
// gtk_selection_data_targets_includes_text()). For VTE_FORMAT_HTML,
// the selection will also include the "text/html" target, which when requested,
// returns the HTML data in UTF-16 with a U+FEFF BYTE ORDER MARK character at
// the start.
//
// The function takes the following parameters:
//
//   - format: Format.
//
func (terminal *Terminal) CopyClipboardFormat(format Format) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.VteFormat    // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.VteFormat(format)

	C.vte_terminal_copy_clipboard_format(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(format)
}

// CopyPrimary places the selected text in the terminal in the
// K_SELECTION_PRIMARY selection.
func (terminal *Terminal) CopyPrimary() {
	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_copy_primary(_arg0)
	runtime.KeepAlive(terminal)
}

// Feed interprets data as if it were data received from a child process.
//
// The function takes the following parameters:
//
//   - data (optional): string in the terminal's current encoding.
//
func (terminal *Terminal) Feed(data string) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.char        // out
	var _arg2 C.gssize

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg2 = (C.gssize)(len(data))
	_arg1 = (*C.char)(C.calloc(C.size_t((len(data) + 1)), C.size_t(C.sizeof_char)))
	copy(unsafe.Slice((*byte)(unsafe.Pointer(_arg1)), len(data)), data)
	defer C.free(unsafe.Pointer(_arg1))

	C.vte_terminal_feed(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(data)
}

// FeedChild sends a block of UTF-8 text to the child as if it were entered by
// the user at the keyboard.
//
// The function takes the following parameters:
//
//   - text (optional): data to send to the child.
//
func (terminal *Terminal) FeedChild(text string) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.char        // out
	var _arg2 C.gssize

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg2 = (C.gssize)(len(text))
	_arg1 = (*C.char)(C.calloc(C.size_t((len(text) + 1)), C.size_t(C.sizeof_char)))
	copy(unsafe.Slice((*byte)(unsafe.Pointer(_arg1)), len(text)), text)
	defer C.free(unsafe.Pointer(_arg1))

	C.vte_terminal_feed_child(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(text)
}

// FeedChildBinary sends a block of binary data to the child.
//
// Deprecated: Don't send binary data. Use vte_terminal_feed_child() instead to
// send UTF-8 text.
//
// The function takes the following parameters:
//
//   - data (optional) to send to the child.
//
func (terminal *Terminal) FeedChildBinary(data []byte) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.guint8      // out
	var _arg2 C.gsize

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg2 = (C.gsize)(len(data))
	if len(data) > 0 {
		_arg1 = (*C.guint8)(unsafe.Pointer(&data[0]))
	}

	C.vte_terminal_feed_child_binary(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(data)
}

// AllowBold checks whether or not the terminal will attempt to draw bold text,
// by using a bold font variant.
//
// Deprecated: There's probably no reason for this feature to exist.
//
// The function returns the following values:
//
//   - ok: TRUE if bolding is enabled, FALSE if not.
//
func (terminal *Terminal) AllowBold() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_allow_bold(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AllowHyperlink checks whether or not hyperlinks (OSC 8 escape sequence) are
// allowed.
//
// The function returns the following values:
//
//   - ok: TRUE if hyperlinks are enabled, FALSE if not.
//
func (terminal *Terminal) AllowHyperlink() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_allow_hyperlink(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AudibleBell checks whether or not the terminal will beep when the child
// outputs the "bl" sequence.
//
// The function returns the following values:
//
//   - ok: TRUE if audible bell is enabled, FALSE if not.
//
func (terminal *Terminal) AudibleBell() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_audible_bell(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// BoldIsBright checks whether the SGR 1 attribute also switches to the bright
// counterpart of the first 8 palette colors, in addition to making them bold
// (legacy behavior) or if SGR 1 only enables bold and leaves the color intact.
//
// The function returns the following values:
//
//   - ok: TRUE if bold also enables bright, FALSE if not.
//
func (terminal *Terminal) BoldIsBright() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_bold_is_bright(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - gdouble terminal's cell height scale.
//
func (terminal *Terminal) CellHeightScale() float64 {
	var _arg0 *C.VteTerminal // out
	var _cret C.double       // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_cell_height_scale(_arg0)
	runtime.KeepAlive(terminal)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// The function returns the following values:
//
//   - gdouble terminal's cell width scale.
//
func (terminal *Terminal) CellWidthScale() float64 {
	var _arg0 *C.VteTerminal // out
	var _cret C.double       // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_cell_width_scale(_arg0)
	runtime.KeepAlive(terminal)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// The function returns the following values:
//
//   - glong: height of a character cell
//
//     Note that this method should rather be called
//     vte_terminal_get_cell_height, because the return value takes
//     cell-height-scale into account.
//
func (terminal *Terminal) CharHeight() int32 {
	var _arg0 *C.VteTerminal // out
	var _cret C.glong        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_char_height(_arg0)
	runtime.KeepAlive(terminal)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// The function returns the following values:
//
//   - glong: width of a character cell
//
//     Note that this method should rather be called
//     vte_terminal_get_cell_width, because the return value takes
//     cell-width-scale into account.
//
func (terminal *Terminal) CharWidth() int32 {
	var _arg0 *C.VteTerminal // out
	var _cret C.glong        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_char_width(_arg0)
	runtime.KeepAlive(terminal)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// CjkAmbiguousWidth returns whether ambiguous-width characters are
// narrow or wide. (Note that when using a non-UTF-8 encoding set via
// vte_terminal_set_encoding(), the width of ambiguous-width characters is fixed
// and determined by the encoding itself.).
//
// The function returns the following values:
//
//   - gint: 1 if ambiguous-width characters are narrow, or 2 if they are wide.
//
func (terminal *Terminal) CjkAmbiguousWidth() int {
	var _arg0 *C.VteTerminal // out
	var _cret C.int          // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_cjk_ambiguous_width(_arg0)
	runtime.KeepAlive(terminal)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// ColorBackgroundForDraw returns the background colour, as used by terminal
// when drawing the background, which may be different from the color set by
// vte_terminal_set_color_background().
//
// Note: you must only call this function while handling the GtkWidget::draw
// signal.
//
// This function is rarely useful. One use for it is if you disable drawing the
// background (see vte_terminal_set_clear_background()) and then need to draw
// the background yourself.
//
// The function returns the following values:
//
//   - color: location to store a RGBA color.
//
func (terminal *Terminal) ColorBackgroundForDraw() *gdk.RGBA {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.GdkRGBA      // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_get_color_background_for_draw(_arg0, &_arg1)
	runtime.KeepAlive(terminal)

	var _color *gdk.RGBA // out

	_color = (*gdk.RGBA)(gextras.NewStructNative(unsafe.Pointer((&_arg1))))

	return _color
}

// The function returns the following values:
//
//   - glong: number of columns.
//
func (terminal *Terminal) ColumnCount() int32 {
	var _arg0 *C.VteTerminal // out
	var _cret C.glong        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_column_count(_arg0)
	runtime.KeepAlive(terminal)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// The function returns the following values:
//
//   - utf8 (optional): URI of the current directory of the process running in
//     the terminal, or NULL.
//
func (terminal *Terminal) CurrentDirectoryURI() string {
	var _arg0 *C.VteTerminal // out
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_current_directory_uri(_arg0)
	runtime.KeepAlive(terminal)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// The function returns the following values:
//
//   - utf8 (optional): URI of the current file the process running in the
//     terminal is operating on, or NULL if not set.
//
func (terminal *Terminal) CurrentFileURI() string {
	var _arg0 *C.VteTerminal // out
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_current_file_uri(_arg0)
	runtime.KeepAlive(terminal)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// CursorBlinkMode returns the currently set cursor blink mode.
//
// The function returns the following values:
//
//   - cursorBlinkMode: cursor blink mode.
//
func (terminal *Terminal) CursorBlinkMode() CursorBlinkMode {
	var _arg0 *C.VteTerminal       // out
	var _cret C.VteCursorBlinkMode // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_cursor_blink_mode(_arg0)
	runtime.KeepAlive(terminal)

	var _cursorBlinkMode CursorBlinkMode // out

	_cursorBlinkMode = CursorBlinkMode(_cret)

	return _cursorBlinkMode
}

// CursorPosition reads the location of the insertion cursor and returns it.
// The row coordinate is absolute.
//
// This method is unaware of BiDi. The returned column is logical column.
//
// The function returns the following values:
//
//   - column (optional): location to store the column, or NULL.
//   - row (optional): location to store the row, or NULL.
//
func (terminal *Terminal) CursorPosition() (column, row int32) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.glong        // in
	var _arg2 C.glong        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_get_cursor_position(_arg0, &_arg1, &_arg2)
	runtime.KeepAlive(terminal)

	var _column int32 // out
	var _row int32    // out

	_column = int32(_arg1)
	_row = int32(_arg2)

	return _column, _row
}

// CursorShape returns the currently set cursor shape.
//
// The function returns the following values:
//
//   - cursorShape: cursor shape.
//
func (terminal *Terminal) CursorShape() CursorShape {
	var _arg0 *C.VteTerminal   // out
	var _cret C.VteCursorShape // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_cursor_shape(_arg0)
	runtime.KeepAlive(terminal)

	var _cursorShape CursorShape // out

	_cursorShape = CursorShape(_cret)

	return _cursorShape
}

// EnableBidi checks whether the terminal performs bidirectional text rendering.
//
// The function returns the following values:
//
//   - ok: TRUE if BiDi is enabled, FALSE if not.
//
func (terminal *Terminal) EnableBidi() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_enable_bidi(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - ok: TRUE if fallback scrolling is enabled.
//
func (terminal *Terminal) EnableFallbackScrolling() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_enable_fallback_scrolling(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// EnableShaping checks whether the terminal shapes Arabic text.
//
// The function returns the following values:
//
//   - ok: TRUE if Arabic shaping is enabled, FALSE if not.
//
func (terminal *Terminal) EnableShaping() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_enable_shaping(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - ok: FALSE.
//
func (terminal *Terminal) EnableSixel() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_enable_sixel(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Encoding determines the name of the encoding in which the terminal expects
// data to be encoded, or NULL if UTF-8 is in use.
//
// Deprecated: Support for non-UTF-8 is deprecated.
//
// The function returns the following values:
//
//   - utf8 (optional): current encoding for the terminal.
//
func (terminal *Terminal) Encoding() string {
	var _arg0 *C.VteTerminal // out
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_encoding(_arg0)
	runtime.KeepAlive(terminal)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Font queries the terminal for information about the fonts which will be
// used to draw text in the terminal. The actual font takes the font scale into
// account, this is not reflected in the return value, the unscaled font is
// returned.
//
// The function returns the following values:
//
//   - fontDescription describing the font the terminal uses to render text at
//     the default font scale of 1.0.
//
func (terminal *Terminal) Font() *pango.FontDescription {
	var _arg0 *C.VteTerminal          // out
	var _cret *C.PangoFontDescription // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_font(_arg0)
	runtime.KeepAlive(terminal)

	var _fontDescription *pango.FontDescription // out

	_fontDescription = (*pango.FontDescription)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _fontDescription
}

// The function returns the following values:
//
//   - fontOptions (optional) terminal's font options, or NULL.
//
func (terminal *Terminal) FontOptions() *cairo.FontOptions {
	var _arg0 *C.VteTerminal          // out
	var _cret *C.cairo_font_options_t // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_font_options(_arg0)
	runtime.KeepAlive(terminal)

	var _fontOptions *cairo.FontOptions // out

	if _cret != nil {
		_fontOptions = (*cairo.FontOptions)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	}

	return _fontOptions
}

// The function returns the following values:
//
//   - gdouble terminal's font scale.
//
func (terminal *Terminal) FontScale() float64 {
	var _arg0 *C.VteTerminal // out
	var _cret C.gdouble      // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_font_scale(_arg0)
	runtime.KeepAlive(terminal)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// HasSelection checks if the terminal currently contains selected text.
// Note that this is different from determining if the terminal is the owner of
// any Clipboard items.
//
// The function returns the following values:
//
//   - ok: TRUE if part of the text in the terminal is selected.
//
func (terminal *Terminal) HasSelection() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_has_selection(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IconTitle: deprecated: since version 0.54.
//
// The function returns the following values:
//
//   - utf8 (optional): NULL.
//
func (terminal *Terminal) IconTitle() string {
	var _arg0 *C.VteTerminal // out
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_icon_title(_arg0)
	runtime.KeepAlive(terminal)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// InputEnabled returns whether the terminal allow user input.
//
// The function returns the following values:
//
func (terminal *Terminal) InputEnabled() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_input_enabled(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// MouseAutohide determines the value of the terminal's mouse autohide setting.
// When autohiding is enabled, the mouse cursor will be hidden when the user
// presses a key and shown when the user moves the mouse. This setting can be
// changed using vte_terminal_set_mouse_autohide().
//
// The function returns the following values:
//
//   - ok: TRUE if autohiding is enabled, FALSE if not.
//
func (terminal *Terminal) MouseAutohide() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_mouse_autohide(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Pty returns the Pty of terminal.
//
// The function returns the following values:
//
//   - pty or NULL.
//
func (terminal *Terminal) Pty() *Pty {
	var _arg0 *C.VteTerminal // out
	var _cret *C.VtePty      // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_pty(_arg0)
	runtime.KeepAlive(terminal)

	var _pty *Pty // out

	_pty = wrapPty(coreglib.Take(unsafe.Pointer(_cret)))

	return _pty
}

// RewrapOnResize checks whether or not the terminal will rewrap its contents
// upon resize.
//
// Deprecated: since version 0.58.
//
// The function returns the following values:
//
//   - ok: TRUE if rewrapping is enabled, FALSE if not.
//
func (terminal *Terminal) RewrapOnResize() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_rewrap_on_resize(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - glong: number of rows.
//
func (terminal *Terminal) RowCount() int32 {
	var _arg0 *C.VteTerminal // out
	var _cret C.glong        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_row_count(_arg0)
	runtime.KeepAlive(terminal)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// The function returns the following values:
//
//   - ok: whether or not the terminal will forcibly scroll to the bottom of
//     the viewable history when the user presses a key. Modifier keys do not
//     trigger this behavior.
//
func (terminal *Terminal) ScrollOnKeystroke() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_scroll_on_keystroke(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - ok: whether or not the terminal will forcibly scroll to the bottom of the
//     viewable history when the new data is received from the child.
//
func (terminal *Terminal) ScrollOnOutput() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_scroll_on_output(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - ok: TRUE if the scroll unit is pixels; or FALSE if the unit is lines.
//
func (terminal *Terminal) ScrollUnitIsPixels() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_scroll_unit_is_pixels(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - glong: length of the scrollback buffer used by the terminal. A negative
//     value means "infinite scrollback".
//
func (terminal *Terminal) ScrollbackLines() int32 {
	var _arg0 *C.VteTerminal // out
	var _cret C.glong        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_scrollback_lines(_arg0)
	runtime.KeepAlive(terminal)

	var _glong int32 // out

	_glong = int32(_cret)

	return _glong
}

// Text extracts a view of the visible part of the terminal.
//
// This method is unaware of BiDi. The columns returned in attributes are
// logical columns.
//
// Note: since 0.68, passing a non-NULL array parameter is deprecated. Starting
// with 0.72, passing a non-NULL array parameter will make this function itself
// return NULL. Since 0.72, passing a non-NULL is_selected parameter will make
// this function itself return NULL.
//
// The function takes the following parameters:
//
//   - isSelected (optional) callback. Deprecated: 0.44: Always pass NULL here.
//
// The function returns the following values:
//
//   - attributes (optional): location for storing text attributes. Deprecated:
//     0.68: Always pass NULL here.
//   - utf8 (optional): newly allocated text string, or NULL.
//
func (terminal *Terminal) Text(isSelected SelectionFunc) ([]CharAttributes, string) {
	var _arg0 *C.VteTerminal     // out
	var _arg1 C.VteSelectionFunc // out
	var _arg2 C.gpointer
	var _arg3 C.GArray // in
	var _cret *C.char  // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if isSelected != nil {
		_arg1 = (*[0]byte)(C._gotk4_vte3_SelectionFunc)
		_arg2 = C.gpointer(gbox.Assign(isSelected))
		defer gbox.Delete(uintptr(_arg2))
	}

	_cret = C.vte_terminal_get_text(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(isSelected)

	var _attributes []CharAttributes // out
	var _utf8 string                 // out

	{
		var len uintptr
		p := C.g_array_steal(&_arg3, (*C.gsize)(&len))
		src := unsafe.Slice((*C.GArray)(p), len)
		_attributes = make([]CharAttributes, len)
		for i := 0; i < len; i++ {
			_attributes[i] = *(*CharAttributes)(gextras.NewStructNative(unsafe.Pointer((&src[i]))))
			runtime.SetFinalizer(
				gextras.StructIntern(unsafe.Pointer(&_attributes[i])),
				func(intern *struct{ C unsafe.Pointer }) {
					C.free(intern.C)
				},
			)
		}
	}
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _attributes, _utf8
}

// TextBlinkMode checks whether or not the terminal will allow blinking text.
//
// The function returns the following values:
//
//   - textBlinkMode: blinking setting.
//
func (terminal *Terminal) TextBlinkMode() TextBlinkMode {
	var _arg0 *C.VteTerminal     // out
	var _cret C.VteTextBlinkMode // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_text_blink_mode(_arg0)
	runtime.KeepAlive(terminal)

	var _textBlinkMode TextBlinkMode // out

	_textBlinkMode = TextBlinkMode(_cret)

	return _textBlinkMode
}

// TextIncludeTrailingSpaces extracts a view of the visible part of the
// terminal.
//
// This method is unaware of BiDi. The columns returned in attributes are
// logical columns.
//
// Note: since 0.68, passing a non-NULL array parameter is deprecated. Starting
// with 0.72, passing a non-NULL array parameter will make this function itself
// return NULL. Since 0.72, passing a non-NULL is_selected parameter will make
// this function itself return NULL.
//
// Deprecated: Use vte_terminal_get_text() instead.
//
// The function takes the following parameters:
//
//   - isSelected (optional) callback. Deprecated: 0.44: Always pass NULL here.
//
// The function returns the following values:
//
//   - attributes (optional): location for storing text attributes. Deprecated:
//     0.68: Always pass NULL here.
//   - utf8: newly allocated text string, or NULL.
//
func (terminal *Terminal) TextIncludeTrailingSpaces(isSelected SelectionFunc) ([]CharAttributes, string) {
	var _arg0 *C.VteTerminal     // out
	var _arg1 C.VteSelectionFunc // out
	var _arg2 C.gpointer
	var _arg3 C.GArray // in
	var _cret *C.char  // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if isSelected != nil {
		_arg1 = (*[0]byte)(C._gotk4_vte3_SelectionFunc)
		_arg2 = C.gpointer(gbox.Assign(isSelected))
		defer gbox.Delete(uintptr(_arg2))
	}

	_cret = C.vte_terminal_get_text_include_trailing_spaces(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(isSelected)

	var _attributes []CharAttributes // out
	var _utf8 string                 // out

	{
		var len uintptr
		p := C.g_array_steal(&_arg3, (*C.gsize)(&len))
		src := unsafe.Slice((*C.GArray)(p), len)
		_attributes = make([]CharAttributes, len)
		for i := 0; i < len; i++ {
			_attributes[i] = *(*CharAttributes)(gextras.NewStructNative(unsafe.Pointer((&src[i]))))
			runtime.SetFinalizer(
				gextras.StructIntern(unsafe.Pointer(&_attributes[i])),
				func(intern *struct{ C unsafe.Pointer }) {
					C.free(intern.C)
				},
			)
		}
	}
	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _attributes, _utf8
}

// TextRange extracts a view of the visible part of the terminal. The entire
// scrollback buffer is scanned, so it is possible to read the entire contents
// of the buffer using this function.
//
// This method is unaware of BiDi. The columns passed in start_col and end_row,
// and returned in attributes are logical columns.
//
// Since 0.68, passing a non-NULL array parameter is deprecated. Since 0.72,
// passing a non-NULL array parameter will make this function itself return
// NULL. Since 0.72, passing a non-NULL is_selected function will make this
// function itself return NULL.
//
// The function takes the following parameters:
//
//   - startRow: first row to search for data.
//   - startCol: first column to search for data.
//   - endRow: last row to search for data.
//   - endCol: last column to search for data.
//   - isSelected (optional) callback. Deprecated: 0.44: Always pass NULL here.
//
// The function returns the following values:
//
//   - attributes (optional): location for storing text attributes. Deprecated:
//     0.68: Always pass NULL here.
//   - utf8 (optional): newly allocated text string, or NULL.
//
func (terminal *Terminal) TextRange(startRow, startCol, endRow, endCol int32, isSelected SelectionFunc) ([]CharAttributes, string) {
	var _arg0 *C.VteTerminal     // out
	var _arg1 C.glong            // out
	var _arg2 C.glong            // out
	var _arg3 C.glong            // out
	var _arg4 C.glong            // out
	var _arg5 C.VteSelectionFunc // out
	var _arg6 C.gpointer
	var _arg7 C.GArray // in
	var _cret *C.char  // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.glong(startRow)
	_arg2 = C.glong(startCol)
	_arg3 = C.glong(endRow)
	_arg4 = C.glong(endCol)
	if isSelected != nil {
		_arg5 = (*[0]byte)(C._gotk4_vte3_SelectionFunc)
		_arg6 = C.gpointer(gbox.Assign(isSelected))
		defer gbox.Delete(uintptr(_arg6))
	}

	_cret = C.vte_terminal_get_text_range(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6, &_arg7)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(startRow)
	runtime.KeepAlive(startCol)
	runtime.KeepAlive(endRow)
	runtime.KeepAlive(endCol)
	runtime.KeepAlive(isSelected)

	var _attributes []CharAttributes // out
	var _utf8 string                 // out

	{
		var len uintptr
		p := C.g_array_steal(&_arg7, (*C.gsize)(&len))
		src := unsafe.Slice((*C.GArray)(p), len)
		_attributes = make([]CharAttributes, len)
		for i := 0; i < len; i++ {
			_attributes[i] = *(*CharAttributes)(gextras.NewStructNative(unsafe.Pointer((&src[i]))))
			runtime.SetFinalizer(
				gextras.StructIntern(unsafe.Pointer(&_attributes[i])),
				func(intern *struct{ C unsafe.Pointer }) {
					C.free(intern.C)
				},
			)
		}
	}
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _attributes, _utf8
}

// TextRangeFormat returns the specified range of text in the specified format.
//
// The function takes the following parameters:
//
//   - format to use.
//   - startRow: first row of the range.
//   - startCol: first column of the range.
//   - endRow: last row of the range.
//   - endCol: last column of the range.
//
// The function returns the following values:
//
//   - length (optional): pointer to a #gsize to store the string length.
//   - utf8 (optional): newly allocated string, or NULL.
//
func (terminal *Terminal) TextRangeFormat(format Format, startRow, startCol, endRow, endCol int32) (uint, string) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.VteFormat    // out
	var _arg2 C.long         // out
	var _arg3 C.long         // out
	var _arg4 C.long         // out
	var _arg5 C.long         // out
	var _arg6 C.gsize        // in
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.VteFormat(format)
	_arg2 = C.long(startRow)
	_arg3 = C.long(startCol)
	_arg4 = C.long(endRow)
	_arg5 = C.long(endCol)

	_cret = C.vte_terminal_get_text_range_format(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, &_arg6)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(format)
	runtime.KeepAlive(startRow)
	runtime.KeepAlive(startCol)
	runtime.KeepAlive(endRow)
	runtime.KeepAlive(endCol)

	var _length uint // out
	var _utf8 string // out

	_length = uint(_arg6)
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _length, _utf8
}

// TextSelected gets the currently selected text in the format specified by
// format. Since 0.72, this function also supports VTE_FORMAT_HTML format.xg.
//
// The function takes the following parameters:
//
//   - format to use.
//
// The function returns the following values:
//
//   - utf8 (optional): newly allocated string containing the selected text,
//     or NULL if there is no selection or the format is not supported.
//
func (terminal *Terminal) TextSelected(format Format) string {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.VteFormat    // out
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.VteFormat(format)

	_cret = C.vte_terminal_get_text_selected(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(format)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _utf8
}

// TextSelectedFull gets the currently selected text in the format specified by
// format.
//
// The function takes the following parameters:
//
//   - format to use.
//
// The function returns the following values:
//
//   - length (optional): pointer to a #gsize to store the string length.
//   - utf8 (optional): newly allocated string containing the selected text,
//     or NULL if there is no selection or the format is not supported.
//
func (terminal *Terminal) TextSelectedFull(format Format) (uint, string) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.VteFormat    // out
	var _arg2 C.gsize        // in
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.VteFormat(format)

	_cret = C.vte_terminal_get_text_selected_full(_arg0, _arg1, &_arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(format)

	var _length uint // out
	var _utf8 string // out

	_length = uint(_arg2)
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _length, _utf8
}

// The function returns the following values:
//
//   - utf8 (optional): window title, or NULL.
//
func (terminal *Terminal) WindowTitle() string {
	var _arg0 *C.VteTerminal // out
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_window_title(_arg0)
	runtime.KeepAlive(terminal)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// WordCharExceptions returns the set of characters which will be considered
// parts of a word when doing word-wise selection, in addition to the default
// which only considers alphanumeric characters part of a word.
//
// If NULL, a built-in set is used.
//
// The function returns the following values:
//
//   - utf8 (optional): string, or NULL.
//
func (terminal *Terminal) WordCharExceptions() string {
	var _arg0 *C.VteTerminal // out
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_get_word_char_exceptions(_arg0)
	runtime.KeepAlive(terminal)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// MatchAddRegex adds the regular expression regex to the list of matching
// expressions. When the user moves the mouse cursor over a section of displayed
// text which matches this expression, the text will be highlighted.
//
// Note that regex should have been created using the
// <literal>PCRE2_MULTILINE</literal> flag.
//
// The function takes the following parameters:
//
//   - regex: Regex.
//   - flags: PCRE2 match flags, or 0.
//
// The function returns the following values:
//
//   - gint: integer associated with this expression.
//
func (terminal *Terminal) MatchAddRegex(regex *Regex, flags uint32) int {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.VteRegex    // out
	var _arg2 C.guint32      // out
	var _cret C.int          // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = (*C.VteRegex)(gextras.StructNative(unsafe.Pointer(regex)))
	_arg2 = C.guint32(flags)

	_cret = C.vte_terminal_match_add_regex(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(regex)
	runtime.KeepAlive(flags)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// MatchCheck checks if the text in and around the specified position matches
// any of the regular expressions previously set using vte_terminal_match_add().
// If a match exists, the text string is returned and if tag is not NULL, the
// number associated with the matched regular expression will be stored in tag.
//
// If more than one regular expression has been set with
// vte_terminal_match_add(), then expressions are checked in the order in which
// they were added.
//
// Deprecated: Use vte_terminal_match_check_event() instead.
//
// The function takes the following parameters:
//
//   - column: text column.
//   - row: text row.
//
// The function returns the following values:
//
//   - tag (optional): location to store the tag, or NULL.
//   - utf8 (optional): newly allocated string which matches one of the
//     previously set regular expressions.
//
func (terminal *Terminal) MatchCheck(column, row int32) (int, string) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.glong        // out
	var _arg2 C.glong        // out
	var _arg3 C.int          // in
	var _cret *C.char        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.glong(column)
	_arg2 = C.glong(row)

	_cret = C.vte_terminal_match_check(_arg0, _arg1, _arg2, &_arg3)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(column)
	runtime.KeepAlive(row)

	var _tag int     // out
	var _utf8 string // out

	_tag = int(_arg3)
	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
		defer C.free(unsafe.Pointer(_cret))
	}

	return _tag, _utf8
}

// MatchRemove removes the regular expression which is associated with the given
// tag from the list of expressions which the terminal will highlight when the
// user moves the mouse cursor over matching text.
//
// The function takes the following parameters:
//
//   - tag of the regex to remove.
//
func (terminal *Terminal) MatchRemove(tag int) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.int          // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.int(tag)

	C.vte_terminal_match_remove(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(tag)
}

// MatchRemoveAll clears the list of regular expressions the terminal uses to
// highlight text when the user moves the mouse cursor.
func (terminal *Terminal) MatchRemoveAll() {
	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_match_remove_all(_arg0)
	runtime.KeepAlive(terminal)
}

// MatchSetCursor sets which cursor the terminal will use if the pointer is over
// the pattern specified by tag. The terminal keeps a reference to cursor.
//
// Deprecated: Use vte_terminal_match_set_cursor_name() instead.
//
// The function takes the following parameters:
//
//   - tag of the regex which should use the specified cursor.
//   - cursor (optional) which the terminal should use when the pattern is
//     highlighted, or NULL to use the standard cursor.
//
func (terminal *Terminal) MatchSetCursor(tag int, cursor *gdk.Cursor) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.int          // out
	var _arg2 *C.GdkCursor   // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.int(tag)
	if cursor != nil {
		_arg2 = (*C.GdkCursor)(unsafe.Pointer(coreglib.InternObject(cursor).Native()))
	}

	C.vte_terminal_match_set_cursor(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(tag)
	runtime.KeepAlive(cursor)
}

// MatchSetCursorName sets which cursor the terminal will use if the pointer is
// over the pattern specified by tag.
//
// The function takes the following parameters:
//
//   - tag of the regex which should use the specified cursor.
//   - cursorName: name of the cursor.
//
func (terminal *Terminal) MatchSetCursorName(tag int, cursorName string) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.int          // out
	var _arg2 *C.char        // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.int(tag)
	_arg2 = (*C.char)(unsafe.Pointer(C.CString(cursorName)))
	defer C.free(unsafe.Pointer(_arg2))

	C.vte_terminal_match_set_cursor_name(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(tag)
	runtime.KeepAlive(cursorName)
}

// PasteClipboard sends the contents of the K_SELECTION_CLIPBOARD selection to
// the terminal's child. It's called on paste menu item, or when user presses
// Shift+Insert.
func (terminal *Terminal) PasteClipboard() {
	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_paste_clipboard(_arg0)
	runtime.KeepAlive(terminal)
}

// PastePrimary sends the contents of the K_SELECTION_PRIMARY selection to the
// terminal's child. The terminal will call also paste the K_SELECTION_PRIMARY
// selection when the user clicks with the the second mouse button.
func (terminal *Terminal) PastePrimary() {
	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_paste_primary(_arg0)
	runtime.KeepAlive(terminal)
}

// PasteText sends text to the terminal's child as if retrived from the
// clipboard, this differs from vte_terminal_feed_child() in that it may process
// text before passing it to the child (e.g. apply bracketed mode).
//
// The function takes the following parameters:
//
//   - text: string to paste.
//
func (terminal *Terminal) PasteText(text string) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.char        // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))

	C.vte_terminal_paste_text(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(text)
}

// PtyNewSync creates a new Pty, sets the emulation property from
// Terminal:emulation, and sets the size using terminal's size.
//
// See vte_pty_new() for more information.
//
// The function takes the following parameters:
//
//   - ctx (optional) or NULL.
//   - flags from PtyFlags.
//
// The function returns the following values:
//
//   - pty: new Pty.
//
func (terminal *Terminal) PtyNewSync(ctx context.Context, flags PtyFlags) (*Pty, error) {
	var _arg0 *C.VteTerminal  // out
	var _arg2 *C.GCancellable // out
	var _arg1 C.VtePtyFlags   // out
	var _cret *C.VtePty       // in
	var _cerr *C.GError       // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg2 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = C.VtePtyFlags(flags)

	_cret = C.vte_terminal_pty_new_sync(_arg0, _arg1, _arg2, &_cerr)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(flags)

	var _pty *Pty    // out
	var _goerr error // out

	_pty = wrapPty(coreglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _pty, _goerr
}

// Reset resets as much of the terminal's internal state as possible, discarding
// any unprocessed input data, resetting character attributes, cursor state,
// national character set state, status line, terminal modes (insert/delete),
// selection state, and encoding.
//
// The function takes the following parameters:
//
//   - clearTabstops: whether to reset tabstops.
//   - clearHistory: whether to empty the terminal's scrollback buffer.
//
func (terminal *Terminal) Reset(clearTabstops, clearHistory bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out
	var _arg2 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if clearTabstops {
		_arg1 = C.TRUE
	}
	if clearHistory {
		_arg2 = C.TRUE
	}

	C.vte_terminal_reset(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(clearTabstops)
	runtime.KeepAlive(clearHistory)
}

// SearchFindNext searches the next string matching the search regex set with
// vte_terminal_search_set_regex().
//
// The function returns the following values:
//
//   - ok: TRUE if a match was found.
//
func (terminal *Terminal) SearchFindNext() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_search_find_next(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SearchFindPrevious searches the previous string matching the search regex set
// with vte_terminal_search_set_regex().
//
// The function returns the following values:
//
//   - ok: TRUE if a match was found.
//
func (terminal *Terminal) SearchFindPrevious() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_search_find_previous(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// The function returns the following values:
//
//   - regex: search Regex regex set in terminal, or NULL.
//
func (terminal *Terminal) SearchGetRegex() *Regex {
	var _arg0 *C.VteTerminal // out
	var _cret *C.VteRegex    // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_search_get_regex(_arg0)
	runtime.KeepAlive(terminal)

	var _regex *Regex // out

	_regex = (*Regex)(gextras.NewStructNative(unsafe.Pointer(_cret)))
	C.vte_regex_ref(_cret)
	runtime.SetFinalizer(
		gextras.StructIntern(unsafe.Pointer(_regex)),
		func(intern *struct{ C unsafe.Pointer }) {
			C.vte_regex_unref((*C.VteRegex)(intern.C))
		},
	)

	return _regex
}

// The function returns the following values:
//
//   - ok: whether searching will wrap around.
//
func (terminal *Terminal) SearchGetWrapAround() bool {
	var _arg0 *C.VteTerminal // out
	var _cret C.gboolean     // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	_cret = C.vte_terminal_search_get_wrap_around(_arg0)
	runtime.KeepAlive(terminal)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SearchSetRegex sets the regex to search for. Unsets the search regex when
// passed NULL.
//
// Note that regex should have been created using the
// <literal>PCRE2_MULTILINE</literal> flag.
//
// The function takes the following parameters:
//
//   - regex (optional) or NULL.
//   - flags: PCRE2 match flags, or 0.
//
func (terminal *Terminal) SearchSetRegex(regex *Regex, flags uint32) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.VteRegex    // out
	var _arg2 C.guint32      // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if regex != nil {
		_arg1 = (*C.VteRegex)(gextras.StructNative(unsafe.Pointer(regex)))
	}
	_arg2 = C.guint32(flags)

	C.vte_terminal_search_set_regex(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(regex)
	runtime.KeepAlive(flags)
}

// SearchSetWrapAround sets whether search should wrap around to the beginning
// of the terminal content when reaching its end.
//
// The function takes the following parameters:
//
//   - wrapAround: whether search should wrap.
//
func (terminal *Terminal) SearchSetWrapAround(wrapAround bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if wrapAround {
		_arg1 = C.TRUE
	}

	C.vte_terminal_search_set_wrap_around(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(wrapAround)
}

// SelectAll selects all text within the terminal (not including the scrollback
// buffer).
func (terminal *Terminal) SelectAll() {
	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_select_all(_arg0)
	runtime.KeepAlive(terminal)
}

// SetAllowBold controls whether or not the terminal will attempt to draw bold
// text, by using a bold font variant.
//
// Deprecated: There's probably no reason for this feature to exist.
//
// The function takes the following parameters:
//
//   - allowBold: TRUE if the terminal should attempt to draw bold text.
//
func (terminal *Terminal) SetAllowBold(allowBold bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if allowBold {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_allow_bold(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(allowBold)
}

// SetAllowHyperlink controls whether or not hyperlinks (OSC 8 escape sequence)
// are allowed.
//
// The function takes the following parameters:
//
//   - allowHyperlink: TRUE if the terminal should allow hyperlinks.
//
func (terminal *Terminal) SetAllowHyperlink(allowHyperlink bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if allowHyperlink {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_allow_hyperlink(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(allowHyperlink)
}

// SetAudibleBell controls whether or not the terminal will beep when the child
// outputs the "bl" sequence.
//
// The function takes the following parameters:
//
//   - isAudible: TRUE if the terminal should beep.
//
func (terminal *Terminal) SetAudibleBell(isAudible bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if isAudible {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_audible_bell(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(isAudible)
}

// SetBackspaceBinding modifies the terminal's backspace key binding, which
// controls what string or control sequence the terminal sends to its child when
// the user presses the backspace key.
//
// The function takes the following parameters:
//
//   - binding for the backspace key.
//
func (terminal *Terminal) SetBackspaceBinding(binding EraseBinding) {
	var _arg0 *C.VteTerminal    // out
	var _arg1 C.VteEraseBinding // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.VteEraseBinding(binding)

	C.vte_terminal_set_backspace_binding(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(binding)
}

// SetBoldIsBright sets whether the SGR 1 attribute also switches to the bright
// counterpart of the first 8 palette colors, in addition to making them bold
// (legacy behavior) or if SGR 1 only enables bold and leaves the color intact.
//
// The function takes the following parameters:
//
//   - boldIsBright: TRUE if bold should also enable bright.
//
func (terminal *Terminal) SetBoldIsBright(boldIsBright bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if boldIsBright {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_bold_is_bright(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(boldIsBright)
}

// SetCellHeightScale sets the terminal's cell height scale to scale.
//
// This can be used to increase the line spacing. (The font's height is not
// affected.) Valid values go from 1.0 (default) to 2.0 ("double spacing").
//
// The function takes the following parameters:
//
//   - scale: cell height scale.
//
func (terminal *Terminal) SetCellHeightScale(scale float64) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.double       // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.double(scale)

	C.vte_terminal_set_cell_height_scale(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(scale)
}

// SetCellWidthScale sets the terminal's cell width scale to scale.
//
// This can be used to increase the letter spacing. (The font's width is not
// affected.) Valid values go from 1.0 (default) to 2.0.
//
// The function takes the following parameters:
//
//   - scale: cell width scale.
//
func (terminal *Terminal) SetCellWidthScale(scale float64) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.double       // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.double(scale)

	C.vte_terminal_set_cell_width_scale(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(scale)
}

// SetCjkAmbiguousWidth: this setting controls whether ambiguous-width
// characters are narrow or wide. (Note that when using a non-UTF-8 encoding set
// via vte_terminal_set_encoding(), the width of ambiguous-width characters is
// fixed and determined by the encoding itself.).
//
// The function takes the following parameters:
//
//   - width: either 1 (narrow) or 2 (wide).
//
func (terminal *Terminal) SetCjkAmbiguousWidth(width int) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.int          // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.int(width)

	C.vte_terminal_set_cjk_ambiguous_width(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(width)
}

// SetClearBackground sets whether to paint the background with the background
// colour. The default is TRUE.
//
// This function is rarely useful. One use for it is to add a background image
// to the terminal.
//
// The function takes the following parameters:
//
//   - setting: whether to clear the background.
//
func (terminal *Terminal) SetClearBackground(setting bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_clear_background(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(setting)
}

// SetColorBackground sets the background color for text which does not have a
// specific background color assigned. Only has effect when no background image
// is set and when the terminal is not transparent.
//
// The function takes the following parameters:
//
//   - background: new background color.
//
func (terminal *Terminal) SetColorBackground(background *gdk.RGBA) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.GdkRGBA     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(background)))

	C.vte_terminal_set_color_background(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(background)
}

// SetColorBold sets the color used to draw bold text in the default foreground
// color. If bold is NULL then the default color is used.
//
// The function takes the following parameters:
//
//   - bold (optional): new bold color or NULL.
//
func (terminal *Terminal) SetColorBold(bold *gdk.RGBA) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.GdkRGBA     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if bold != nil {
		_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(bold)))
	}

	C.vte_terminal_set_color_bold(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(bold)
}

// SetColorCursor sets the background color for text which is under the cursor.
// If NULL, text under the cursor will be drawn with foreground and background
// colors reversed.
//
// The function takes the following parameters:
//
//   - cursorBackground (optional): new color to use for the text cursor,
//     or NULL.
//
func (terminal *Terminal) SetColorCursor(cursorBackground *gdk.RGBA) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.GdkRGBA     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if cursorBackground != nil {
		_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(cursorBackground)))
	}

	C.vte_terminal_set_color_cursor(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(cursorBackground)
}

// SetColorCursorForeground sets the foreground color for text which is under
// the cursor. If NULL, text under the cursor will be drawn with foreground and
// background colors reversed.
//
// The function takes the following parameters:
//
//   - cursorForeground (optional): new color to use for the text cursor,
//     or NULL.
//
func (terminal *Terminal) SetColorCursorForeground(cursorForeground *gdk.RGBA) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.GdkRGBA     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if cursorForeground != nil {
		_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(cursorForeground)))
	}

	C.vte_terminal_set_color_cursor_foreground(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(cursorForeground)
}

// SetColorForeground sets the foreground color used to draw normal text.
//
// The function takes the following parameters:
//
//   - foreground: new foreground color.
//
func (terminal *Terminal) SetColorForeground(foreground *gdk.RGBA) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.GdkRGBA     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(foreground)))

	C.vte_terminal_set_color_foreground(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(foreground)
}

// SetColorHighlight sets the background color for text which is highlighted.
// If NULL, it is unset. If neither highlight background nor highlight
// foreground are set, highlighted text (which is usually highlighted because it
// is selected) will be drawn with foreground and background colors reversed.
//
// The function takes the following parameters:
//
//   - highlightBackground (optional): new color to use for highlighted text,
//     or NULL.
//
func (terminal *Terminal) SetColorHighlight(highlightBackground *gdk.RGBA) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.GdkRGBA     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if highlightBackground != nil {
		_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(highlightBackground)))
	}

	C.vte_terminal_set_color_highlight(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(highlightBackground)
}

// SetColorHighlightForeground sets the foreground color for text which is
// highlighted. If NULL, it is unset. If neither highlight background nor
// highlight foreground are set, highlighted text (which is usually highlighted
// because it is selected) will be drawn with foreground and background colors
// reversed.
//
// The function takes the following parameters:
//
//   - highlightForeground (optional): new color to use for highlighted text,
//     or NULL.
//
func (terminal *Terminal) SetColorHighlightForeground(highlightForeground *gdk.RGBA) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.GdkRGBA     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if highlightForeground != nil {
		_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(highlightForeground)))
	}

	C.vte_terminal_set_color_highlight_foreground(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(highlightForeground)
}

// SetColors: palette specifies the new values for the 256 palette colors:
// 8 standard colors, their 8 bright counterparts, 6x6x6 color cube, and 24
// grayscale colors. Omitted entries will default to a hardcoded value.
//
// palette_size must be 0, 8, 16, 232 or 256.
//
// If foreground is NULL and palette_size is greater than 0, the new foreground
// color is taken from palette[7]. If background is NULL and palette_size is
// greater than 0, the new background color is taken from palette[0].
//
// The function takes the following parameters:
//
//   - foreground (optional): new foreground color, or NULL.
//   - background (optional): new background color, or NULL.
//   - palette (optional): color palette.
//
func (terminal *Terminal) SetColors(foreground, background *gdk.RGBA, palette []gdk.RGBA) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.GdkRGBA     // out
	var _arg2 *C.GdkRGBA     // out
	var _arg3 *C.GdkRGBA     // out
	var _arg4 C.gsize

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if foreground != nil {
		_arg1 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(foreground)))
	}
	if background != nil {
		_arg2 = (*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer(background)))
	}
	_arg4 = (C.gsize)(len(palette))
	_arg3 = (*C.GdkRGBA)(C.calloc(C.size_t(len(palette)), C.size_t(C.sizeof_GdkRGBA)))
	defer C.free(unsafe.Pointer(_arg3))
	{
		out := unsafe.Slice((*C.GdkRGBA)(_arg3), len(palette))
		for i := range palette {
			out[i] = *(*C.GdkRGBA)(gextras.StructNative(unsafe.Pointer((&palette[i]))))
		}
	}

	C.vte_terminal_set_colors(_arg0, _arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(foreground)
	runtime.KeepAlive(background)
	runtime.KeepAlive(palette)
}

// SetCursorBlinkMode sets whether or not the cursor will blink. Using
// VTE_CURSOR_BLINK_SYSTEM will use the Settings::gtk-cursor-blink setting.
//
// The function takes the following parameters:
//
//   - mode to use.
//
func (terminal *Terminal) SetCursorBlinkMode(mode CursorBlinkMode) {
	var _arg0 *C.VteTerminal       // out
	var _arg1 C.VteCursorBlinkMode // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.VteCursorBlinkMode(mode)

	C.vte_terminal_set_cursor_blink_mode(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(mode)
}

// SetCursorShape sets the shape of the cursor drawn.
//
// The function takes the following parameters:
//
//   - shape to use.
//
func (terminal *Terminal) SetCursorShape(shape CursorShape) {
	var _arg0 *C.VteTerminal   // out
	var _arg1 C.VteCursorShape // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.VteCursorShape(shape)

	C.vte_terminal_set_cursor_shape(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(shape)
}

// SetDefaultColors: reset the terminal palette to reasonable compiled-in
// default color.
func (terminal *Terminal) SetDefaultColors() {
	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_set_default_colors(_arg0)
	runtime.KeepAlive(terminal)
}

// SetDeleteBinding modifies the terminal's delete key binding, which controls
// what string or control sequence the terminal sends to its child when the user
// presses the delete key.
//
// The function takes the following parameters:
//
//   - binding for the delete key.
//
func (terminal *Terminal) SetDeleteBinding(binding EraseBinding) {
	var _arg0 *C.VteTerminal    // out
	var _arg1 C.VteEraseBinding // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.VteEraseBinding(binding)

	C.vte_terminal_set_delete_binding(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(binding)
}

// SetEnableBidi controls whether or not the terminal will perform bidirectional
// text rendering.
//
// The function takes the following parameters:
//
//   - enableBidi: TRUE to enable BiDi support.
//
func (terminal *Terminal) SetEnableBidi(enableBidi bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if enableBidi {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_enable_bidi(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(enableBidi)
}

// SetEnableFallbackScrolling controls whether the terminal uses scroll events
// to scroll the history if the event was not otherwise consumed by it.
//
// This function is rarely useful, except when the terminal is added to a
// ScrolledWindow, to perform kinetic scrolling (while vte itself does not, yet,
// implement kinetic scrolling by itself).
//
// The function takes the following parameters:
//
//   - enable: whether to enable fallback scrolling.
//
func (terminal *Terminal) SetEnableFallbackScrolling(enable bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if enable {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_enable_fallback_scrolling(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(enable)
}

// SetEnableShaping controls whether or not the terminal will shape Arabic text.
//
// The function takes the following parameters:
//
//   - enableShaping: TRUE to enable Arabic shaping.
//
func (terminal *Terminal) SetEnableShaping(enableShaping bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if enableShaping {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_enable_shaping(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(enableShaping)
}

// SetEnableSixel: set whether to enable SIXEL images.
//
// The function takes the following parameters:
//
//   - enabled: whether to enable SIXEL images.
//
func (terminal *Terminal) SetEnableSixel(enabled bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_enable_sixel(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(enabled)
}

// SetEncoding changes the encoding the terminal will expect data from the child
// to be encoded with. For certain terminal types, applications executing in the
// terminal can change the encoding. If codeset is NULL, it uses "UTF-8".
//
// Note: Support for non-UTF-8 is deprecated and may get removed altogether.
// Instead of this function, you should use a wrapper like luit(1) when spawning
// the child process.
//
// Deprecated: Support for non-UTF-8 is deprecated.
//
// The function takes the following parameters:
//
//   - codeset (optional): target charset, or NULL to use UTF-8.
//
func (terminal *Terminal) SetEncoding(codeset string) error {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.char        // out
	var _cerr *C.GError      // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if codeset != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(codeset)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.vte_terminal_set_encoding(_arg0, _arg1, &_cerr)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(codeset)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

// SetFont sets the font used for rendering all text displayed by the terminal,
// overriding any fonts set using gtk_widget_modify_font(). The terminal
// will immediately attempt to load the desired font, retrieve its metrics,
// and attempt to resize itself to keep the same number of rows and columns.
// The font scale is applied to the specified font.
//
// The function takes the following parameters:
//
//   - fontDesc (optional) for the desired font, or NULL.
//
func (terminal *Terminal) SetFont(fontDesc *pango.FontDescription) {
	var _arg0 *C.VteTerminal          // out
	var _arg1 *C.PangoFontDescription // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if fontDesc != nil {
		_arg1 = (*C.PangoFontDescription)(gextras.StructNative(unsafe.Pointer(fontDesc)))
	}

	C.vte_terminal_set_font(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(fontDesc)
}

// SetFontOptions sets the terminal's font options to options.
//
// Note that on GTK4, the terminal by default uses font options with
// CAIRO_HINT_METRICS_ON set; to override that, use this function to set a
// #cairo_font_options_t that has CAIRO_HINT_METRICS_OFF set.
//
// The function takes the following parameters:
//
//   - fontOptions (optional): font options, or NULL.
//
func (terminal *Terminal) SetFontOptions(fontOptions *cairo.FontOptions) {
	var _arg0 *C.VteTerminal          // out
	var _arg1 *C.cairo_font_options_t // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if fontOptions != nil {
		_arg1 = (*C.cairo_font_options_t)(gextras.StructNative(unsafe.Pointer(fontOptions)))
	}

	C.vte_terminal_set_font_options(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(fontOptions)
}

// SetFontScale sets the terminal's font scale to scale.
//
// The function takes the following parameters:
//
//   - scale: font scale.
//
func (terminal *Terminal) SetFontScale(scale float64) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gdouble      // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.gdouble(scale)

	C.vte_terminal_set_font_scale(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(scale)
}

// SetInputEnabled enables or disables user input. When user input is disabled,
// the terminal's child will not receive any key press, or mouse button press or
// motion events sent to it.
//
// The function takes the following parameters:
//
//   - enabled: whether to enable user input.
//
func (terminal *Terminal) SetInputEnabled(enabled bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_input_enabled(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(enabled)
}

// SetMouseAutohide changes the value of the terminal's mouse autohide setting.
// When autohiding is enabled, the mouse cursor will be hidden when the user
// presses a key and shown when the user moves the mouse. This setting can be
// read using vte_terminal_get_mouse_autohide().
//
// The function takes the following parameters:
//
//   - setting: whether the mouse pointer should autohide.
//
func (terminal *Terminal) SetMouseAutohide(setting bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_mouse_autohide(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(setting)
}

// SetPty sets pty as the PTY to use in terminal. Use NULL to unset the PTY.
//
// The function takes the following parameters:
//
//   - pty (optional) or NULL.
//
func (terminal *Terminal) SetPty(pty *Pty) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.VtePty      // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if pty != nil {
		_arg1 = (*C.VtePty)(unsafe.Pointer(coreglib.InternObject(pty).Native()))
	}

	C.vte_terminal_set_pty(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(pty)
}

// SetRewrapOnResize controls whether or not the terminal will rewrap its
// contents, including the scrollback history, whenever the terminal's width
// changes.
//
// Deprecated: since version 0.58.
//
// The function takes the following parameters:
//
//   - rewrap: TRUE if the terminal should rewrap on resize.
//
func (terminal *Terminal) SetRewrapOnResize(rewrap bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if rewrap {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_rewrap_on_resize(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(rewrap)
}

// SetScrollOnKeystroke controls whether or not the terminal will forcibly
// scroll to the bottom of the viewable history when the user presses a key.
// Modifier keys do not trigger this behavior.
//
// The function takes the following parameters:
//
//   - scroll: whether the terminal should scroll on keystrokes.
//
func (terminal *Terminal) SetScrollOnKeystroke(scroll bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if scroll {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_scroll_on_keystroke(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(scroll)
}

// SetScrollOnOutput controls whether or not the terminal will forcibly scroll
// to the bottom of the viewable history when the new data is received from the
// child.
//
// The function takes the following parameters:
//
//   - scroll: whether the terminal should scroll on output.
//
func (terminal *Terminal) SetScrollOnOutput(scroll bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if scroll {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_scroll_on_output(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(scroll)
}

// SetScrollUnitIsPixels controls whether the terminal's scroll unit is lines or
// pixels.
//
// This function is rarely useful, except when the terminal is added to a
// ScrolledWindow.
//
// The function takes the following parameters:
//
//   - enable: whether to use pixels as scroll unit.
//
func (terminal *Terminal) SetScrollUnitIsPixels(enable bool) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	if enable {
		_arg1 = C.TRUE
	}

	C.vte_terminal_set_scroll_unit_is_pixels(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(enable)
}

// SetScrollbackLines sets the length of the scrollback buffer used by the
// terminal. The size of the scrollback buffer will be set to the larger of this
// value and the number of visible rows the widget can display, so 0 can safely
// be used to disable scrollback.
//
// A negative value means "infinite scrollback".
//
// Note that this setting only affects the normal screen buffer. No scrollback
// is allowed on the alternate screen buffer.
//
// The function takes the following parameters:
//
//   - lines: length of the history buffer.
//
func (terminal *Terminal) SetScrollbackLines(lines int32) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.glong        // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.glong(lines)

	C.vte_terminal_set_scrollback_lines(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(lines)
}

// SetSize attempts to change the terminal's size in terms of rows and columns.
// If the attempt succeeds, the widget will resize itself to the proper size.
//
// The function takes the following parameters:
//
//   - columns: desired number of columns.
//   - rows: desired number of rows.
//
func (terminal *Terminal) SetSize(columns, rows int32) {
	var _arg0 *C.VteTerminal // out
	var _arg1 C.glong        // out
	var _arg2 C.glong        // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.glong(columns)
	_arg2 = C.glong(rows)

	C.vte_terminal_set_size(_arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(columns)
	runtime.KeepAlive(rows)
}

// SetTextBlinkMode controls whether or not the terminal will allow blinking
// text.
//
// The function takes the following parameters:
//
//   - textBlinkMode to use.
//
func (terminal *Terminal) SetTextBlinkMode(textBlinkMode TextBlinkMode) {
	var _arg0 *C.VteTerminal     // out
	var _arg1 C.VteTextBlinkMode // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.VteTextBlinkMode(textBlinkMode)

	C.vte_terminal_set_text_blink_mode(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(textBlinkMode)
}

// SetWordCharExceptions: with this function you can provide a set of characters
// which will be considered parts of a word when doing word-wise selection,
// in addition to the default which only considers alphanumeric characters part
// of a word.
//
// The characters in exceptions must be non-alphanumeric, each character
// must occur only once, and if exceptions contains the character U+002D
// HYPHEN-MINUS, it must be at the start of the string.
//
// Use NULL to reset the set of exception characters to the default.
//
// The function takes the following parameters:
//
//   - exceptions: string of ASCII punctuation characters, or NULL.
//
func (terminal *Terminal) SetWordCharExceptions(exceptions string) {
	var _arg0 *C.VteTerminal // out
	var _arg1 *C.char        // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(exceptions)))
	defer C.free(unsafe.Pointer(_arg1))

	C.vte_terminal_set_word_char_exceptions(_arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(exceptions)
}

// UnselectAll clears the current selection.
func (terminal *Terminal) UnselectAll() {
	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C.vte_terminal_unselect_all(_arg0)
	runtime.KeepAlive(terminal)
}

// WriteContentsSync: write contents of the current contents of terminal
// (including any scrollback history) to stream according to flags.
//
// If cancellable is not NULL, then the operation can be cancelled by triggering
// the cancellable object from another thread. If the operation was cancelled,
// the error G_IO_ERROR_CANCELLED will be returned in error.
//
// This is a synchronous operation and will make the widget (and input
// processing) during the write operation, which may take a long time depending
// on scrollback history and stream availability for writing.
//
// The function takes the following parameters:
//
//   - ctx (optional) object, or NULL.
//   - stream to write to.
//   - flags: set of WriteFlags.
//
func (terminal *Terminal) WriteContentsSync(ctx context.Context, stream gio.OutputStreamer, flags WriteFlags) error {
	var _arg0 *C.VteTerminal   // out
	var _arg3 *C.GCancellable  // out
	var _arg1 *C.GOutputStream // out
	var _arg2 C.VteWriteFlags  // out
	var _cerr *C.GError        // in

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	{
		cancellable := gcancel.GCancellableFromContext(ctx)
		defer runtime.KeepAlive(cancellable)
		_arg3 = (*C.GCancellable)(unsafe.Pointer(cancellable.Native()))
	}
	_arg1 = (*C.GOutputStream)(unsafe.Pointer(coreglib.InternObject(stream).Native()))
	_arg2 = C.VteWriteFlags(flags)

	C.vte_terminal_write_contents_sync(_arg0, _arg1, _arg2, _arg3, &_cerr)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(ctx)
	runtime.KeepAlive(stream)
	runtime.KeepAlive(flags)

	var _goerr error // out

	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _goerr
}

func (terminal *Terminal) bell() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.bell

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_bell(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

// The function takes the following parameters:
//
//   - charWidth
//   - charHeight
//
func (terminal *Terminal) charSizeChanged(charWidth, charHeight uint) {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.char_size_changed

	var _arg0 *C.VteTerminal // out
	var _arg1 C.guint        // out
	var _arg2 C.guint        // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.guint(charWidth)
	_arg2 = C.guint(charHeight)

	C._gotk4_vte3_Terminal_virtual_char_size_changed(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(charWidth)
	runtime.KeepAlive(charHeight)
}

// The function takes the following parameters:
//
func (terminal *Terminal) childExited(status int) {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.child_exited

	var _arg0 *C.VteTerminal // out
	var _arg1 C.int          // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.int(status)

	C._gotk4_vte3_Terminal_virtual_child_exited(unsafe.Pointer(fnarg), _arg0, _arg1)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(status)
}

// The function takes the following parameters:
//
//   - text
//   - size
//
func (terminal *Terminal) commit(text string, size uint) {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.commit

	var _arg0 *C.VteTerminal // out
	var _arg1 *C.gchar       // out
	var _arg2 C.guint        // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = (*C.gchar)(unsafe.Pointer(C.CString(text)))
	defer C.free(unsafe.Pointer(_arg1))
	_arg2 = C.guint(size)

	C._gotk4_vte3_Terminal_virtual_commit(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(text)
	runtime.KeepAlive(size)
}

func (terminal *Terminal) contentsChanged() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.contents_changed

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_contents_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

// copyClipboard places the selected text in the terminal in the
// K_SELECTION_CLIPBOARD selection.
//
// Deprecated: Use vte_terminal_copy_clipboard_format() with VTE_FORMAT_TEXT
// instead.
func (terminal *Terminal) copyClipboard() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.copy_clipboard

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_copy_clipboard(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) cursorMoved() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.cursor_moved

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_cursor_moved(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) decreaseFontSize() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.decrease_font_size

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_decrease_font_size(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) deiconifyWindow() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.deiconify_window

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_deiconify_window(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) encodingChanged() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.encoding_changed

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_encoding_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) eoF() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.eof

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_eof(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) iconTitleChanged() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.icon_title_changed

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_icon_title_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) iconifyWindow() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.iconify_window

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_iconify_window(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) increaseFontSize() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.increase_font_size

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_increase_font_size(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) lowerWindow() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.lower_window

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_lower_window(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) maximizeWindow() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.maximize_window

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_maximize_window(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

// The function takes the following parameters:
//
//   - x
//   - y
//
func (terminal *Terminal) moveWindow(x, y uint) {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.move_window

	var _arg0 *C.VteTerminal // out
	var _arg1 C.guint        // out
	var _arg2 C.guint        // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.guint(x)
	_arg2 = C.guint(y)

	C._gotk4_vte3_Terminal_virtual_move_window(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(x)
	runtime.KeepAlive(y)
}

// pasteClipboard sends the contents of the K_SELECTION_CLIPBOARD selection to
// the terminal's child. It's called on paste menu item, or when user presses
// Shift+Insert.
func (terminal *Terminal) pasteClipboard() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.paste_clipboard

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_paste_clipboard(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) raiseWindow() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.raise_window

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_raise_window(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) refreshWindow() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.refresh_window

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_refresh_window(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

// The function takes the following parameters:
//
//   - width
//   - height
//
func (terminal *Terminal) resizeWindow(width, height uint) {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.resize_window

	var _arg0 *C.VteTerminal // out
	var _arg1 C.guint        // out
	var _arg2 C.guint        // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))
	_arg1 = C.guint(width)
	_arg2 = C.guint(height)

	C._gotk4_vte3_Terminal_virtual_resize_window(unsafe.Pointer(fnarg), _arg0, _arg1, _arg2)
	runtime.KeepAlive(terminal)
	runtime.KeepAlive(width)
	runtime.KeepAlive(height)
}

func (terminal *Terminal) restoreWindow() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.restore_window

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_restore_window(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) selectionChanged() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.selection_changed

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_selection_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

func (terminal *Terminal) windowTitleChanged() {
	gclass := (*C.VteTerminalClass)(coreglib.PeekParentClass(terminal))
	fnarg := gclass.window_title_changed

	var _arg0 *C.VteTerminal // out

	_arg0 = (*C.VteTerminal)(unsafe.Pointer(coreglib.InternObject(terminal).Native()))

	C._gotk4_vte3_Terminal_virtual_window_title_changed(unsafe.Pointer(fnarg), _arg0)
	runtime.KeepAlive(terminal)
}

// TerminalClass: all of these fields should be considered read-only, except for
// derived classes.
//
// An instance of this type is always passed by reference.
type TerminalClass struct {
	*terminalClass
}

// terminalClass is the struct that's finalized.
type terminalClass struct {
	native *C.VteTerminalClass
}
