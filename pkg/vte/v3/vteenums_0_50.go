// Code generated by girgen. DO NOT EDIT.

package vte

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <vte/vte.h>
import "C"

// GType values.
var (
	GTypeFormat = coreglib.Type(C.vte_format_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFormat, F: marshalFormat},
	})
}

// Format: enumeration type that can be used to specify the format the selection
// should be copied to the clipboard in.
type Format C.gint

const (
	// FormatText: export as plain text.
	FormatText Format = 1
	// FormatHtml: export as HTML formatted text.
	FormatHtml Format = 2
)

func marshalFormat(p uintptr) (interface{}, error) {
	return Format(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Format.
func (f Format) String() string {
	switch f {
	case FormatText:
		return "Text"
	case FormatHtml:
		return "Html"
	default:
		return fmt.Sprintf("Format(%d)", f)
	}
}
