// Code generated by girgen. DO NOT EDIT.

package vte

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <vte/vte.h>
import "C"

// GType values.
var (
	GTypeRegexError = coreglib.Type(C.vte_regex_error_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeRegexError, F: marshalRegexError},
	})
}

// RegexError: enum type for regex errors. In addition to the values listed
// above, any PCRE2 error values may occur.
type RegexError C.gint

const (
	// RegexErrorIncompatible: PCRE2 library was built without Unicode support
	// which is required for VTE.
	RegexErrorIncompatible RegexError = 2147483646
	// RegexErrorNotSupported regexes are not supported because VTE was built
	// without PCRE2 support.
	RegexErrorNotSupported RegexError = 2147483647
)

func marshalRegexError(p uintptr) (interface{}, error) {
	return RegexError(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RegexError.
func (r RegexError) String() string {
	switch r {
	case RegexErrorIncompatible:
		return "Incompatible"
	case RegexErrorNotSupported:
		return "NotSupported"
	default:
		return fmt.Sprintf("RegexError(%d)", r)
	}
}
