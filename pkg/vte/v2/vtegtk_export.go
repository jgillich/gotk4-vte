// Code generated by girgen. DO NOT EDIT.

package vte

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gdk/v3"
)

// #include <stdlib.h>
// #include <vte/vte.h>
import "C"

//export _gotk4_vte2_Terminal_ConnectBell
func _gotk4_vte2_Terminal_ConnectBell(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectCharSizeChanged
func _gotk4_vte2_Terminal_ConnectCharSizeChanged(arg0 C.gpointer, arg1 C.guint, arg2 C.guint, arg3 C.guintptr) {
	var f func(width, height uint)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(width, height uint))
	}

	var _width uint  // out
	var _height uint // out

	_width = uint(arg1)
	_height = uint(arg2)

	f(_width, _height)
}

//export _gotk4_vte2_Terminal_ConnectChildExited
func _gotk4_vte2_Terminal_ConnectChildExited(arg0 C.gpointer, arg1 C.gint, arg2 C.guintptr) {
	var f func(status int)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg2))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(status int))
	}

	var _status int // out

	_status = int(arg1)

	f(_status)
}

//export _gotk4_vte2_Terminal_ConnectCommit
func _gotk4_vte2_Terminal_ConnectCommit(arg0 C.gpointer, arg1 *C.gchar, arg2 C.guint, arg3 C.guintptr) {
	var f func(text string, size uint)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(text string, size uint))
	}

	var _text string // out
	var _size uint   // out

	_text = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_size = uint(arg2)

	f(_text, _size)
}

//export _gotk4_vte2_Terminal_ConnectContentsChanged
func _gotk4_vte2_Terminal_ConnectContentsChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectCopyClipboard
func _gotk4_vte2_Terminal_ConnectCopyClipboard(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectCurrentDirectoryURIChanged
func _gotk4_vte2_Terminal_ConnectCurrentDirectoryURIChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectCurrentFileURIChanged
func _gotk4_vte2_Terminal_ConnectCurrentFileURIChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectCursorMoved
func _gotk4_vte2_Terminal_ConnectCursorMoved(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectDecreaseFontSize
func _gotk4_vte2_Terminal_ConnectDecreaseFontSize(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectDeiconifyWindow
func _gotk4_vte2_Terminal_ConnectDeiconifyWindow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectEncodingChanged
func _gotk4_vte2_Terminal_ConnectEncodingChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectEOF
func _gotk4_vte2_Terminal_ConnectEOF(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectHyperlinkHoverURIChanged
func _gotk4_vte2_Terminal_ConnectHyperlinkHoverURIChanged(arg0 C.gpointer, arg1 *C.gchar, arg2 *C.GdkRectangle, arg3 C.guintptr) {
	var f func(uri string, bbox *gdk.Rectangle)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(uri string, bbox *gdk.Rectangle))
	}

	var _uri string          // out
	var _bbox *gdk.Rectangle // out

	_uri = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	_bbox = (*gdk.Rectangle)(gextras.NewStructNative(unsafe.Pointer(arg2)))

	f(_uri, _bbox)
}

//export _gotk4_vte2_Terminal_ConnectIconifyWindow
func _gotk4_vte2_Terminal_ConnectIconifyWindow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectIncreaseFontSize
func _gotk4_vte2_Terminal_ConnectIncreaseFontSize(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectLowerWindow
func _gotk4_vte2_Terminal_ConnectLowerWindow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectMaximizeWindow
func _gotk4_vte2_Terminal_ConnectMaximizeWindow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectMoveWindow
func _gotk4_vte2_Terminal_ConnectMoveWindow(arg0 C.gpointer, arg1 C.guint, arg2 C.guint, arg3 C.guintptr) {
	var f func(x, y uint)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(x, y uint))
	}

	var _x uint // out
	var _y uint // out

	_x = uint(arg1)
	_y = uint(arg2)

	f(_x, _y)
}

//export _gotk4_vte2_Terminal_ConnectNotificationReceived
func _gotk4_vte2_Terminal_ConnectNotificationReceived(arg0 C.gpointer, arg1 *C.gchar, arg2 *C.gchar, arg3 C.guintptr) {
	var f func(summary, body string)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(summary, body string))
	}

	var _summary string // out
	var _body string    // out

	_summary = C.GoString((*C.gchar)(unsafe.Pointer(arg1)))
	if arg2 != nil {
		_body = C.GoString((*C.gchar)(unsafe.Pointer(arg2)))
	}

	f(_summary, _body)
}

//export _gotk4_vte2_Terminal_ConnectPasteClipboard
func _gotk4_vte2_Terminal_ConnectPasteClipboard(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectRaiseWindow
func _gotk4_vte2_Terminal_ConnectRaiseWindow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectRefreshWindow
func _gotk4_vte2_Terminal_ConnectRefreshWindow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectResizeWindow
func _gotk4_vte2_Terminal_ConnectResizeWindow(arg0 C.gpointer, arg1 C.guint, arg2 C.guint, arg3 C.guintptr) {
	var f func(width, height uint)
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg3))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func(width, height uint))
	}

	var _width uint  // out
	var _height uint // out

	_width = uint(arg1)
	_height = uint(arg2)

	f(_width, _height)
}

//export _gotk4_vte2_Terminal_ConnectRestoreWindow
func _gotk4_vte2_Terminal_ConnectRestoreWindow(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectSelectionChanged
func _gotk4_vte2_Terminal_ConnectSelectionChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectShellPrecmd
func _gotk4_vte2_Terminal_ConnectShellPrecmd(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectShellPreexec
func _gotk4_vte2_Terminal_ConnectShellPreexec(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

//export _gotk4_vte2_Terminal_ConnectWindowTitleChanged
func _gotk4_vte2_Terminal_ConnectWindowTitleChanged(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := coreglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}
