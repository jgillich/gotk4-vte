// Code generated by girgen. DO NOT EDIT.

package vte

import (
	"fmt"
	"strings"
)

// #include <stdlib.h>
// #include <vte/vte.h>
import "C"

// FeatureFlags: enumeration type for features.
type FeatureFlags C.guint

const (
	// FeatureFlagBidi: whether VTE was built with bidirectional text support.
	FeatureFlagBidi FeatureFlags = 0b1
	// FeatureFlagIcu: whether VTE was built with ICU support.
	FeatureFlagIcu FeatureFlags = 0b10
	// FeatureFlagSystemd: whether VTE was built with systemd support.
	FeatureFlagSystemd FeatureFlags = 0b100
	// FeatureFlagSixel: whether VTE was built with SIXEL support.
	FeatureFlagSixel FeatureFlags = 0b1000
)

// String returns the names in string for FeatureFlags.
func (f FeatureFlags) String() string {
	if f == 0 {
		return "FeatureFlags(0)"
	}

	var builder strings.Builder
	builder.Grow(66)

	for f != 0 {
		next := f & (f - 1)
		bit := f - next

		switch bit {
		case FeatureFlagBidi:
			builder.WriteString("FlagBidi|")
		case FeatureFlagIcu:
			builder.WriteString("FlagIcu|")
		case FeatureFlagSystemd:
			builder.WriteString("FlagSystemd|")
		case FeatureFlagSixel:
			builder.WriteString("FlagSixel|")
		default:
			builder.WriteString(fmt.Sprintf("FeatureFlags(0b%b)|", bit))
		}

		f = next
	}

	return strings.TrimSuffix(builder.String(), "|")
}

// Has returns true if f contains other.
func (f FeatureFlags) Has(other FeatureFlags) bool {
	return (f & other) == other
}
