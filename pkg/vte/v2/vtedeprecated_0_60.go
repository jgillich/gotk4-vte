// Code generated by girgen. DO NOT EDIT.

package vte

import (
	"runtime"
	"unsafe"
)

// #include <stdlib.h>
// #include <vte/vte.h>
import "C"

// GetEncodingSupported queries whether the legacy encoding encoding is
// supported.
//
// If ICU support is not available, this function always returns FALSE.
//
// Note that UTF-8 is always supported; you can select it by passing NULL to
// vte_terminal_set_encoding().
//
// Deprecated: since version 0.60.
//
// The function takes the following parameters:
//
//   - encoding: name of the legacy encoding.
//
// The function returns the following values:
//
//   - ok: TRUE iff the legacy encoding encoding is supported.
//
func GetEncodingSupported(encoding string) bool {
	var _arg1 *C.char    // out
	var _cret C.gboolean // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(encoding)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.vte_get_encoding_supported(_arg1)
	runtime.KeepAlive(encoding)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// GetEncodings gets the list of supported legacy encodings.
//
// If ICU support is not available, this returns an empty vector.
// Note that UTF-8 is always supported; you can select it by passing NULL to
// vte_terminal_set_encoding().
//
// Deprecated: since version 0.60.
//
// The function takes the following parameters:
//
//   - includeAliases: whether to include alias names.
//
// The function returns the following values:
//
//   - utf8s: list of supported encodings; free with g_strfreev().
//
func GetEncodings(includeAliases bool) []string {
	var _arg1 C.gboolean // out
	var _cret **C.char   // in

	if includeAliases {
		_arg1 = C.TRUE
	}

	_cret = C.vte_get_encodings(_arg1)
	runtime.KeepAlive(includeAliases)

	var _utf8s []string // out

	defer C.free(unsafe.Pointer(_cret))
	{
		var i int
		var z *C.char
		for p := _cret; *p != z; p = &unsafe.Slice(p, 2)[1] {
			i++
		}

		src := unsafe.Slice(_cret, i)
		_utf8s = make([]string, i)
		for i := range src {
			_utf8s[i] = C.GoString((*C.gchar)(unsafe.Pointer(src[i])))
			defer C.free(unsafe.Pointer(src[i]))
		}
	}

	return _utf8s
}
